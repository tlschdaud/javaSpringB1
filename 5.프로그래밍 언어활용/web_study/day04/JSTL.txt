1. 설치하기
    
    jstl api
    
    jstl 구현체
    

<dependency>

 <groupId>jakarta.servlet.jsp.jstl</groupId>   <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>  <version>3.0.0</version>

</dependency>

<dependency> 

 <groupId>org.glassfish.web</groupId>  <artifactId>jakarta.servlet.jsp.jstl</artifactId>  <version>3.0.1</version>

</dependency>

core 라이브러리 : 제어구문, 반복문

fmt 라이브러리 : 형식화, 숫자 형식, 날짜 형식, 시간대, 다국어

functions 라이브러리 : 문자열 가공..

sql 라이브러리

1. 코어(core) 라이브러리
    
    uri=”jakarta.tags.core”
    
    참고)
    
    javaee 9 → JSTL 1.2
    
    uri =”http://java.sun.com/jsp/jstl/core
    
    1) <c:set>
    
    - EL식 속성으로 추가 / EL식 변수로 사용 가능
    - var : 변수명
    - value : 값 / 기본형 값, 문자열, EL 변수, <%=값%>
    - scope : page(기본값 - pageContext)
        
                    request
        
              session
        
              application
        
    
    2) <c:remove>
    
    - EL식 속성 제거
    - var=”속성명”
    - 모든 속성 범위에서 삭제
    - scope : 제거될 속성의 범위 설정
    
    3) <c:if>
    
    - 조건문
    - test : EL 식 - 참, 거짓
        
               :  true, false : 상수로 사용 가능
        
    
    4) <c:choose>
    
    <c:choose>
    
    <c:when text=”조건식”>
    
    ….
    
    </c:when>
    
    <c:otherwise>
    
    모든 조건이 거짓일때
    
    </c:otherwise>
    
    </c:choose>
    
    5) <c:forEach>
    
    - 반복문
    - 횟수
        - begin : 반복 시작번호
        - end : 반복 종료 번호
        - var : 변수명 - 반복 번호
        - step : 증감 단위
        
    - 배열, 컬랙션(Collection - List, Set), Iterator, Enumeration
        - items : EL 변수
        - var : 현재요소
        - varStatus :
            - index : 반복 순서(0부터 시작하는 순서)
            - count : 반복 순서(1부터 시작하는 순서)
            - current : 현재 반복 아이템
            - first : 처음 반복인지
            - last : 마지막 반복인지
        
    - 콤마(,) 문자열
        - items : EL 변수, 문자열
        
    - <c:forEach> 액션의 items 애트리뷰트를 이용해서 처리할 수 있는 데이터
    
    6)  <c:forTokens>
    
    - java.util.StringTokenizer
    - items : 문자열
    - delims : 구문 문자
    - var : 분리된 문자가 담길 EL 변수
    
    7) <c:catch>
    
    - 자바 코드 없이 태그 방식으로 예외 처리
    - var : 예외가 발생하면 생성될 예외 객체 변수명
        - 예외가 없으면 null
    
    8) <c:redirect>
    
    - uri : 주소
    - <c:param name=”” value=”” /> : 쿼리스트링
    
    참고)
    
    HttpServletResponse
    
    sendRedirect(url);
    
    : 응답 헤더 → Location : 주소.
    
    9) <c:import>
    
    - 동일서버 자원 + 외부 서버 자원
    - uri = “버퍼에 포함될 자원 경로”
    - 요청 데이터를 url에 설정된 경로에 전송
    - <c:param naem=”” value=”” />
    
    참고)
    
    <jsp:include …/> 동작이 비슷
    
    - 버퍼에 추가 가능한 자원 : 동일 서버의 자원만 가능
        
        jsp, text, html, 서블릿 출력 결과문
        
    
    10) <c:url>
    
    - contextPath : 서버 배포 환경에 따라서 변경될 수 있는 URL
        
        예) /day04
        
    - var : 변수명 : 변환된 주소 값을 EL 변수로 담아준다.
    - 
    - HttpSerbletRequest
        - String getContextPath
    
    11) <c:out>
    
    :  데이터 출력
    
    : HTML 태그 → 엔티티문자 : 태그가 해석되지 않는 문자열로 변환해서 출력 → HTML 해석 허용 : escapeXml=”false”
    
    : value : “태그 값”
    
    : default : “기본값” : value에 값이 null이거나  비어 있는 경우
    
2. 포매팅(fmt) 라이브러리
    
    uri=”jakarta.tags.fmt //JSTL 3.0
    
    prefix=”fmt”
    
    JSTL 1.2
    
    uri = “http://java.sun.com/jsp/jstl/fmt”
    
    1)fmt:formatDate
    
    : java.util.Date
    
    : java.text.SimpleDateFormat
    
    - date 객체 → 형식화
    
    - value : date 객체
    - type - date : 날짜, time : 시간, both
    - dateStyle : full|long|short
    - timeStyle : full|long|short
    - pattern : 직접 패턴을 입력 형식화
    
    2) fmt:formatNumber
    
    - 숫자에 대한 형식화
        
        10000원 → 10,000원
        
    
    java.text.DecimalFormat
    
    # : 없는 자리수는 표기 X
    
    0 : 없는 자리수는 0으로 채워 넣어준다
    
    - groupingUsed=”true(기본값)”|"false”
    - pattern : 직접 패천 생성
    - type=”curreny” : 통화
    
    3) fmt:setLocale
    
    : 지역화 설정
    
    java.util.Locale : 국가, 언어
    
    - 요청 헤더 Accept-Language 설정에 따라서 생성
    
    4) fmt:timeZone과 fmt:setTimeZone
    
    - java.util.Date
    - 시간대 ID
        - Asia/Seoul
        - Ameria/New_York
    - timeZone : 하위 태그의 적용
    - setTimeZone :  이 태그부터 다음 setTimezone을 만날 때 까지 끝까지 적용
    
    5) fmt:”setBundle과  fmt:bundle
    
    - 다국어 구현시
    - 메세지 파일(properties - 클래스패스 /src/main/resources)
    - basename=”메세지 파일 경로”
    (경로 구분을 마침표(.))
        
        fmt:bundle : 태그 안쪽에 메세지 파일 적용
        
        fmt:setBuncle : 태그 이후로 다음 fmt:set
        
    
    fmt:message
    
    - java.text.MessageFormat
    - 메세지 치환 : fmt:param
        
        {숫자}
        
        {0}, {1}
        
        사용자01(user01)님 로그인
        
    
    참고)
    
    properties 파일 형식
    
    이름=값
    
    이름=값
    
    #  주석
    
    java.util.Properties
    
    java.util.ResourceBundle
    
    6) fmt:requestEncoding
    
    - POST 요청 데이터 : 한글 깨짐(servlet 4.0)
    
     참고) servlet 6.0 문제 X
    
    reuqest.setCharacterEncoding(”UTF-8”);
    
    <fmt:requestEncoding value=”UTF-8” /> 
    
3. 함수(functions) 라이브러리
    
    uri=”jakarta.tags.functions”
    
    prefix=”fn”
    
    - 문자열 가공
    - EL식 내에서 적용, 태그 X
    - ${fn:toUpperCase(str)}

JSTL 1.2

uri=”http://java.sun.com/jsp/jstl/functions”

split(str1, str2)

join(arr,str2)